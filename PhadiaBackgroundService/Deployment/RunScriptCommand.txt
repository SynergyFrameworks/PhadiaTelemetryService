deploy_phadia_service.bat -name CustomServiceName -exe C:\Phadia2500\PhadiaBackgroundService.exe


sc create "PhadiaTelemetryService" binPath= "C:\Phadia2500\PhadiaBackgroundService.exe"

sc description "PhadiaTelemetryService" "Phadia Telemetry Service for processing allergen data"




Ensure your application is set up correctly to run as a Windows Service.
Install the service using the Windows Service Control Manager (SC) or a custom installer.
Start the service.
Build your application in Release mode.
Open a Command Prompt or PowerShell as an Administrator.
Navigate to the directory containing your built executable.


Press Win + R, type services.msc, and press Enter.
Look for your service name in the list.

To check if the service is running from the command line, you can use:
Copysc query "PhadiaTelemetryService"


Service Overview:
The Phadia Telemetry Service is a Windows background service designed to process allergen telemetry data. It monitors a specified directory for new files, processes them, and sends the data to both an Event Hub and a gRPC endpoint.

Key Components:

1. PhadiaTelemetryHandler:
   - Handles the core logic for processing telemetry data.
   - Sends data to Event Hub and gRPC endpoints.
   - Implements retry logic for failed transmissions.

2. FileProcessingService:
   - Monitors a specified directory for new files.
   - Processes XML and JSON files containing allergen data.
   - Keeps track of processed files to avoid reprocessing.

3. TelemetryServiceClient:
   - Handles communication with Azure Event Hub.
   - Implements retry logic for failed Event Hub transmissions.

4. GrpcClient:
   - Manages communication with the gRPC endpoint.
   - Implements a circuit breaker pattern for resilience.

5. HangfireJobsSetup:
   - Configures recurring jobs using Hangfire for scheduled file processing.

Functionality:
1. File Monitoring and Processing:
   - Regularly checks a specified directory for new files.
   - Processes XML and JSON files containing allergen telemetry data.
   - Avoids reprocessing already processed files.

2. Data Transmission:
   - Sends processed data to Azure Event Hub.
   - Transmits data to a gRPC endpoint.
   - Implements retry mechanisms and circuit breakers for resilient communication.

3. Logging and Metrics:
   - Uses Serilog for structured logging.
   - Logs to both console and Elasticsearch.
   - Tracks metrics such as processed files, failed files, and transmitted data.

4. Scheduled Jobs:
   - Uses Hangfire to schedule regular file processing jobs.

Required Endpoints and Services:
1. Azure Event Hub:
   - Endpoint: Specified in configuration as EventHubConnectionString
   - Purpose: Receives processed allergen telemetry data

2. gRPC Service:
   - Endpoint: Specified in configuration as gRPC:BaseURI
   - Purpose: Receives processed allergen telemetry data

3. Elasticsearch:
   - Endpoint: Specified in configuration (default: http://localhost:9200)
   - Purpose: Stores application logs

Configuration (appsettings.json):
```json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "Telemetry": {
    "EventHubConnectionString": "EventHub_Connection_String",
    "EventHubName": "EventHub_Name",
      "DirectoryPath": "C:/Phadia2500/Files"
  },
  "gRPC": {
    BaseURI": "grpc://127.0.0.1:8081"
  },
  "Hangfire": {
    "JobIntervalMinutes": 5
  },
  "Elasticsearch": {
    "Uri": "http://localhost:9200",
    "IndexFormat": "phadia-telemetry-logs-{0:yyyy.MM}"
  }
}
```

New/Updated Files:
1. Program.cs: Main entry point, configures services and dependencies.
2. PhadiaTelemetryHandler.cs: Core logic for processing and transmitting data.
3. FileProcessingService.cs: Handles file monitoring and processing.
4. TelemetryServiceClient.cs: Manages Event Hub communication.
5. GrpcClient.cs: Manages gRPC communication.
6. HangfireJobsSetup.cs: Configures Hangfire jobs.
7. AllergenTelemetryData.cs: Data model for allergen telemetry.
8. TelemetryOptions.cs, GrpcOptions.cs: Configuration option classes.
9. Metrics.cs: Tracks service metrics.
10. Various interface files (IGrpcClient.cs, IPhadiaTelemetryHandler.cs, ITelemetryServiceClient.cs).

To set up the service:
1. Ensure all required NuGet packages are installed.
2. Configure appsettings.json with appropriate values.
3. Build the project in Release mode.
4. Use the provided install_service.bat script to install and start the Windows Service.
5. Ensure the Event Hub, gRPC server, and Elasticsearch instances are set up and accessible.

This service provides a robust, scalable solution for processing allergen telemetry data, with features for resilience, monitoring, and easy deployment as a Windows Service.